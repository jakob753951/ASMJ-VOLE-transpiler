1RXY = MOVE [XY] R  | Moves the data at the address XY into register R
2RXY = MOVE XY R    | Moves the literal data XY into register R
3RXY = MOVE R [XY]  | Moves the value in register R to the address XY
40RR = MOVE A B     | Moves the value in register A into register B
5RRR = IADD A B D   | Does INTEGER addition on the values in registers A and B and puts the result into register D
6RRR = FADD A B D   | Does FLOATING POINT addition on the values in registers A and B and puts the result into register D
7RRR = OR A B D     | Applies the OR operation on the values in registers A and B and puts the result into register D
8RRR = AND A B D    | Applies the AND operation on the values in registers A and B and puts the result into register D
9RRR = XOR A B D    | Applies the XOR operation on the values in registers A and B and puts the result into register D
AR0X = ROTATE R X   | Rotates the bits in register R, X times
BRXY = JUMP R mark	| Jumps to the mark, if the value in register R is equal to the value in register 0
C000 = HALT 		| Halts execution

//defines a jump destination
mark: